Index: app/src/main/java/org/alphatilesapps/alphatiles/China.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.alphatilesapps.alphatiles;\r\n\r\nimport static org.alphatilesapps.alphatiles.Start.tileHashMap;\r\nimport static org.alphatilesapps.alphatiles.Start.tileList;\r\nimport static org.alphatilesapps.alphatiles.Start.wordList;\r\n\r\nimport android.content.res.Resources;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Objects;\r\nimport java.util.Random;\r\n\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\n\r\n//Game of 15\r\npublic class China extends GameActivity {\r\n    ArrayList<Start.Word> threeFourTileWords = new ArrayList<>();\r\n    Start.Word oneThreeTileWord;\r\n    Boolean[] solvedLines = new Boolean[4];\r\n    TextView blankTile;\r\n    int moves;\r\n\r\n    protected static final int[] GAME_BUTTONS = {\r\n            R.id.tile01, R.id.tile02, R.id.tile03, R.id.tile04, R.id.tile05, R.id.tile06, R.id.tile07, R.id.tile08, R.id.tile09, R.id.tile10,\r\n            R.id.tile11, R.id.tile12, R.id.tile13, R.id.tile14, R.id.tile15, R.id.tile16\r\n    };\r\n\r\n    protected int[] getGameButtons() {\r\n        return GAME_BUTTONS;\r\n    }\r\n\r\n    protected int[] getWordImages() {\r\n        return null;\r\n    }\r\n\r\n    private static final int[] WORD_IMAGES = {\r\n            R.id.wordImage01, R.id.wordImage02, R.id.wordImage03, R.id.wordImage04\r\n    };\r\n\r\n    @Override\r\n    protected void centerGamesHomeImage() {\r\n\r\n        ImageView instructionsButton = (ImageView) findViewById(R.id.instructions);\r\n        instructionsButton.setVisibility(View.GONE);\r\n\r\n        int gameID = R.id.chinaCL;\r\n        ConstraintLayout constraintLayout = findViewById(gameID);\r\n        ConstraintSet constraintSet = new ConstraintSet();\r\n        constraintSet.clone(constraintLayout);\r\n        constraintSet.connect(R.id.gamesHomeImage, ConstraintSet.END, R.id.repeatImage, ConstraintSet.START, 0);\r\n        constraintSet.connect(R.id.repeatImage, ConstraintSet.START, R.id.gamesHomeImage, ConstraintSet.END, 0);\r\n        constraintSet.centerHorizontally(R.id.gamesHomeImage, gameID);\r\n        constraintSet.applyTo(constraintLayout);\r\n    }\r\n\r\n    @Override\r\n    protected int getAudioInstructionsResID() {\r\n        Resources res = context.getResources();\r\n        int audioInstructionsResID;\r\n        try {\r\n            audioInstructionsResID = res.getIdentifier(Start.gameList.get(gameNumber - 1).instructionAudioName, \"raw\", context.getPackageName());\r\n\r\n        } catch (Exception e) {\r\n            audioInstructionsResID = -1;\r\n        }\r\n        return audioInstructionsResID;\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        context = this;\r\n        setContentView(R.layout.china);\r\n        int gameID = R.id.chinaCL;\r\n        String gameUniqueID = country.toLowerCase().substring(0, 2) + challengeLevel + syllableGame;\r\n        setTitle(Start.localAppName + \": \" + gameNumber + \"    (\" + gameUniqueID + \")\");\r\n\r\n        if (scriptDirection.equals(\"RTL\")) {\r\n            ImageView instructionsImage = (ImageView) findViewById(R.id.instructions);\r\n            ImageView repeatImage = (ImageView) findViewById(R.id.repeatImage);\r\n\r\n            instructionsImage.setRotationY(180);\r\n            repeatImage.setRotationY(180);\r\n\r\n            fixConstraintsRTL(gameID);\r\n        }\r\n\r\n        if (getAudioInstructionsResID() == 0) {\r\n            centerGamesHomeImage();\r\n        }\r\n\r\n        visibleGameButtons = 16;\r\n        updatePointsAndTrackers(0);\r\n        playAgain();\r\n    }\r\n\r\n    public void repeatGame(View View) {\r\n\r\n        if (!repeatLocked) {\r\n            playAgain();\r\n        }\r\n\r\n    }\r\n\r\n    public void playAgain() {\r\n\r\n        if (mediaPlayerIsPlaying) {\r\n            return;\r\n        }\r\n\r\n        switch (challengeLevel) {\r\n            case 2:\r\n                moves = 10;\r\n                break;\r\n            case 3:\r\n                moves = 15;\r\n                break;\r\n            default:\r\n                moves = 5;\r\n        }\r\n\r\n        repeatLocked = true;\r\n        setAdvanceArrowToGray();\r\n        chooseWords();\r\n        setUpTiles();\r\n        setAllGameButtonsClickable();\r\n        //wip\r\n    }\r\n\r\n    private void chooseWords() {\r\n        // Find three four-tile words\r\n        while (threeFourTileWords.size()<3){\r\n            chooseWord();\r\n            if(tileList.parseWordIntoTilesPreliminary(refWord.wordInLOP, refWord).size() == 4){\r\n                threeFourTileWords.add(refWord);\r\n            }\r\n        }\r\n\r\n\r\n        // Find one three-tile word\r\n        while (tileList.parseWordIntoTilesPreliminary(refWord.wordInLOP, refWord).size()!=3) {\r\n            chooseWord();\r\n        }\r\n        oneThreeTileWord = refWord;\r\n    }\r\n\r\n    private void setUpTiles() {\r\n        ArrayList<Start.Tile> tiles = new ArrayList<>();\r\n        for (int t = 0; t < 3; t++) {\r\n            tiles.addAll(tileList.parseWordIntoTilesPreliminary(threeFourTileWords.get(t).wordInLOP, threeFourTileWords.get(t)));\r\n\r\n            ImageView image = findViewById(WORD_IMAGES[t]);\r\n            int resID = getResources().getIdentifier(threeFourTileWords.get(t).wordInLWC + \"2\", \"drawable\", getPackageName());\r\n            image.setImageResource(resID);\r\n            image.setVisibility(View.VISIBLE);\r\n        }\r\n        tiles.addAll(tileList.parseWordIntoTilesPreliminary(oneThreeTileWord.wordInLOP, oneThreeTileWord));\r\n        Collections.shuffle(tiles);\r\n\r\n        ImageView image = findViewById(WORD_IMAGES[3]);\r\n        int resID = getResources().getIdentifier(oneThreeTileWord.wordInLWC + \"2\", \"drawable\", getPackageName());\r\n        image.setImageResource(resID);\r\n        image.setVisibility(View.VISIBLE);\r\n\r\n        if (tiles.size() != 15) {\r\n            chooseWords();\r\n            setUpTiles();\r\n            return;\r\n        }\r\n\r\n        for (int i = 0; i < 15; i++) {\r\n            TextView gameTile = findViewById(GAME_BUTTONS[i]);\r\n            gameTile.setText(tiles.get(i).text);\r\n            gameTile.setBackgroundColor(Color.parseColor(\"#000000\"));\r\n            gameTile.setTextColor(Color.parseColor(\"#FFFFFF\"));\r\n        }\r\n        TextView finalTile = findViewById(GAME_BUTTONS[15]);\r\n        finalTile.setText(\"\");\r\n        finalTile.setBackgroundColor(Color.parseColor(\"#FFFFFF\"));\r\n        finalTile.setTextColor(Color.parseColor(\"#FFFFFF\"));\r\n        blankTile = finalTile;\r\n\r\n        Random rand = new Random();\r\n        int tileX;\r\n        int lastTile = 16;\r\n\r\n        while (moves != 0) {\r\n            tileX = rand.nextInt(GAME_BUTTONS.length);\r\n\r\n            if (isSlideable(tileX) && tileX != lastTile) {\r\n                TextView t = findViewById(GAME_BUTTONS[tileX]);\r\n                swapTiles(t, blankTile);\r\n                lastTile = tileX;\r\n                moves--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void swapTiles(TextView tile1, TextView tile2) {\r\n        CharSequence temp = tile1.getText();\r\n        tile1.setText(tile2.getText());\r\n        tile2.setText(temp);\r\n\r\n        if (tile1.getText() == \"\") {\r\n            tile1.setBackgroundColor(Color.parseColor(\"#FFFFFF\"));\r\n            tile2.setBackgroundColor(Color.parseColor(\"#000000\"));\r\n            blankTile = tile1;\r\n        } else if (tile2.getText() == \"\") {\r\n            tile2.setBackgroundColor(Color.parseColor(\"#FFFFFF\"));\r\n            tile1.setBackgroundColor(Color.parseColor(\"#000000\"));\r\n            blankTile = tile2;\r\n        }\r\n    }\r\n\r\n    private void respondToTileSelection(int justClickedTile) {\r\n\r\n        setAllGameButtonsUnclickable();\r\n        setOptionsRowUnclickable();\r\n\r\n        String blankTag = String.valueOf(blankTile.getTag());\r\n\r\n        int tileNo = justClickedTile - 1; //  justClickedTile uses 1 to 16, tileNo uses the array ID (between [0] and [15]\r\n        TextView tileSelected = findViewById(GAME_BUTTONS[tileNo]);\r\n\r\n        if (isSlideable(tileNo)) {\r\n            swapTiles(tileSelected, blankTile);\r\n        }\r\n\r\n        checkLineForSolve(1);\r\n        checkLineForSolve(5);\r\n        checkLineForSolve(9);\r\n        checkLineForSolve(13);\r\n\r\n        if (areAllLinesSolved()) {\r\n            repeatLocked = false;\r\n            setAdvanceArrowToBlue();\r\n\r\n            updatePointsAndTrackers(4);\r\n\r\n            playCorrectFinalSound();\r\n            setAllGameButtonsUnclickable();\r\n            setOptionsRowClickable();\r\n        } else {\r\n            setAllGameButtonsClickable();\r\n            setOptionsRowClickable();\r\n        }\r\n\r\n    }\r\n\r\n    public void onBtnClick(View view) {\r\n        respondToTileSelection(Integer.parseInt((String) view.getTag())); // KP\r\n    }\r\n\r\n    private void checkLineForSolve(int tileInRowToCheck) {\r\n\r\n        int row = ((tileInRowToCheck - 1) / 4) + 1;\r\n        int leftMostTile = (row - 1) * 4;\r\n\r\n        String gridWord = \"\";\r\n        Start.Word correctWord = null;\r\n        if (row < 4) {\r\n            correctWord = threeFourTileWords.get(row-1);\r\n        } else {\r\n            correctWord = oneThreeTileWord;\r\n        }\r\n        ArrayList<Start.Tile> tilesInGridWord = new ArrayList<>();\r\n        for (int i = 0; i < 4; i++) {\r\n            TextView gameButton = findViewById(GAME_BUTTONS[leftMostTile + i]);\r\n            Start.Tile gameTile = tileHashMap.find(gameButton.getText().toString());\r\n            if (!Objects.isNull(gameTile)){\r\n                tilesInGridWord.add(gameTile);\r\n            }\r\n        }\r\n        gridWord = combineTilesToMakeWord(tilesInGridWord, correctWord, -1);\r\n\r\n        if (row == 4) {\r\n            if (blankTile.getTag().equals(\"14\") || blankTile.getTag().equals(\"15\")) {\r\n                gridWord = \"\"; // For the word \"cat\", will only accept |c|a|t| | or | |c|a|t| but not |c| |a|t| or |c|a| |t|\r\n            }\r\n        }\r\n\r\n        if (gridWord.equals(wordInLOPWithStandardizedSequenceOfCharacters(correctWord))) {\r\n            solvedLines[row - 1] = true;\r\n            for (int i = leftMostTile; i <= (leftMostTile + 3); i++) {\r\n                TextView gameTile = findViewById(GAME_BUTTONS[i]);\r\n                if (gameTile == blankTile) {\r\n                    String wordColorStr = \"#FFFFFF\"; //white\r\n                    int wordColorNo = Color.parseColor(wordColorStr);\r\n                    gameTile.setBackgroundColor(wordColorNo);\r\n                } else {\r\n                    String wordColorStr = \"#4CAF50\"; //theme green\r\n                    int wordColorNo = Color.parseColor(wordColorStr);\r\n                    gameTile.setBackgroundColor(wordColorNo);\r\n                }\r\n            }\r\n        } else {\r\n            solvedLines[row - 1] = false;\r\n            for (int i = leftMostTile; i <= (leftMostTile + 3); i++) {\r\n                TextView gameTile = findViewById(GAME_BUTTONS[i]);\r\n                if (gameTile == blankTile) {\r\n                    String wordColorStr = \"#FFFFFF\"; //white\r\n                    int wordColorNo = Color.parseColor(wordColorStr);\r\n                    gameTile.setBackgroundColor(wordColorNo);\r\n                } else {\r\n                    String wordColorStr = \"#000000\"; //black\r\n                    int wordColorNo = Color.parseColor(wordColorStr);\r\n                    gameTile.setBackgroundColor(wordColorNo);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean areAllLinesSolved() {\r\n\r\n        boolean solved = false;\r\n\r\n        if (solvedLines[0] && solvedLines[1] && solvedLines[2] && solvedLines[3]) {\r\n            solved = true;\r\n        }\r\n        return solved;\r\n\r\n    }\r\n\r\n    private boolean isSlideable(int tileNo) {\r\n        boolean slideable = false;\r\n        TextView tileToCheck;\r\n\r\n        if (tileNo != 0 && tileNo != 4 && tileNo != 8 && tileNo != 12) {\r\n            tileToCheck = findViewById(GAME_BUTTONS[tileNo - 1]);\r\n            slideable = (tileToCheck == blankTile);\r\n        }\r\n\r\n        if (tileNo != 3 && tileNo != 7 && tileNo != 11 && tileNo != 15 && !slideable) {\r\n            tileToCheck = findViewById(GAME_BUTTONS[tileNo + 1]);\r\n            slideable = (tileToCheck == blankTile);\r\n        }\r\n\r\n        if (tileNo >= 4 && !slideable) {\r\n            tileToCheck = findViewById(GAME_BUTTONS[tileNo - 4]);\r\n            slideable = (tileToCheck == blankTile);\r\n        }\r\n\r\n        if (tileNo < 12 && !slideable) {\r\n            tileToCheck = findViewById(GAME_BUTTONS[tileNo + 4]);\r\n            slideable = (tileToCheck == blankTile);\r\n        }\r\n\r\n        return slideable;\r\n    }\r\n\r\n    @Override\r\n    public void clickPicHearAudio(View view) {\r\n\r\n        int justClickedImage = Integer.parseInt((String) view.getTag());\r\n\r\n        if (justClickedImage == 20) {\r\n            refWord = oneThreeTileWord;\r\n        } else {\r\n            refWord = threeFourTileWords.get(justClickedImage - 17);\r\n        }\r\n        playActiveWordClip(false);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        // no action\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/org/alphatilesapps/alphatiles/China.java b/app/src/main/java/org/alphatilesapps/alphatiles/China.java
--- a/app/src/main/java/org/alphatilesapps/alphatiles/China.java	(revision 44b4176122816c87ec6d0029f5a7ac8acdcabe01)
+++ b/app/src/main/java/org/alphatilesapps/alphatiles/China.java	(date 1721661210615)
@@ -7,6 +7,7 @@
 import android.content.res.Resources;
 import android.graphics.Color;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.TextView;
@@ -22,6 +23,8 @@
 //Game of 15
 public class China extends GameActivity {
     ArrayList<Start.Word> threeFourTileWords = new ArrayList<>();
+    private ArrayList<Start.Word> threeTileWords = new ArrayList<>();
+    private ArrayList<Start.Word> fourTileWords = new ArrayList<>();
     Start.Word oneThreeTileWord;
     Boolean[] solvedLines = new Boolean[4];
     TextView blankTile;
@@ -135,20 +138,44 @@
     }
 
     private void chooseWords() {
-        // Find three four-tile words
-        while (threeFourTileWords.size()<3){
-            chooseWord();
-            if(tileList.parseWordIntoTilesPreliminary(refWord.wordInLOP, refWord).size() == 4){
-                threeFourTileWords.add(refWord);
-            }
+        // Ensure words are preprocessed
+        if (threeTileWords.isEmpty() || fourTileWords.isEmpty()) {
+            preprocessWords();
+        }
+
+        // Check if there are enough words to choose from
+        if (threeTileWords.isEmpty()) {
+            Log.e("China", "No 3-tile words available");
+            return;
         }
+        if (fourTileWords.size() < 3) {
+            Log.e("China", "Not enough 4-tile words available, required: 3, available: " + fourTileWords.size());
+            return;
+        }
+
+        // Randomly choose one 3-tile word
+        oneThreeTileWord = threeTileWords.get(new Random().nextInt(threeTileWords.size()));
+
+        // Clear previous selection of 4-tile words
+        threeFourTileWords.clear();
+
+        // Randomly choose three 4-tile words
+        for (int i = 0; i < 3; i++) {
+            threeFourTileWords.add(fourTileWords.remove(new Random().nextInt(fourTileWords.size())));
+        }
+    }
 
 
-        // Find one three-tile word
-        while (tileList.parseWordIntoTilesPreliminary(refWord.wordInLOP, refWord).size()!=3) {
-            chooseWord();
+    private void preprocessWords() {
+        for (Start.Word word : wordList) {
+            if (word.wordInLWC.length() == 3) {
+                threeTileWords.add(word);
+            } else if (word.wordInLWC.length() == 4) {
+                fourTileWords.add(word);
+            }
         }
-        oneThreeTileWord = refWord;
+        Log.d("China", "threeTileWords size: " + threeTileWords.size());
+        Log.d("China", "fourTileWords size: " + fourTileWords.size());
     }
 
     private void setUpTiles() {
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdk 34\r\n\r\n    defaultConfig {\r\n        vectorDrawables.useSupportLibrary = true\r\n        applicationId \"org.alphatilesapps.alphatiles\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 34\r\n        versionCode 131\r\n        versionName \"2.0.0\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    android {\r\n        buildFeatures {\r\n            buildConfig = true\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n            // Optional code that customizes the .apk output name\r\n            applicationVariants.all{\r\n                variant ->\r\n                    variant.outputs.each{\r\n                        output->\r\n                            def apkOutputName = \"alphaTiles.Blue.${variant.productFlavors[0].name}.V${variant.versionName}.apk\"\r\n                            output.outputFileName = apkOutputName\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n    flavorDimensions += \"language\"\r\n    productFlavors {\r\n        //Alpha Tiles internal team developers can find active product flavor definitions here:\r\n        // https://docs.google.com/document/d/1a3satcmHFa5r6l7THrKLgxSWVCs-Mp2yOGyzk4oETsk/edit\r\n\r\n        tpxTeocuitlapa {\r\n            dimension \"language\"\r\n            applicationIdSuffix \".blue.tpxTeocuitlapa\"\r\n            resValue \"string\", \"app_name\", 'Mu̱ꞌtsíin meꞌphaa'\r\n        }\r\n    }\r\n    namespace 'org.alphatilesapps.alphatiles'\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.6.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    implementation 'com.google.android.material:material:1.11.0'\r\n    implementation platform('com.google.firebase:firebase-bom:32.8.0')\r\n    implementation 'com.google.firebase:firebase-analytics'\r\n    testImplementation 'androidx.test.ext:junit:1.1.5'\r\n    testImplementation 'androidx.test.ext:junit:1.1.5'\r\n    testImplementation 'org.robolectric:robolectric:4.10.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 44b4176122816c87ec6d0029f5a7ac8acdcabe01)
+++ b/app/build.gradle	(date 1721661317999)
@@ -1,5 +1,5 @@
 apply plugin: 'com.android.application'
-apply plugin: 'com.google.gms.google-services'
+//apply plugin: 'com.google.gms.google-services'
 
 android {
     compileSdk 34
